<Project>
    <!-- Packaging -->
    <Choose>
        <When Condition="'$(OutputType)' == 'Exe'">
            <PropertyGroup Condition="'$(PublishSingleFile)' == 'true'">
                <PublishTrimmed>true</PublishTrimmed>
                <TrimMode>link</TrimMode>
                <IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>
                <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
            </PropertyGroup>
        </When>
    </Choose>

    <PropertyGroup>
        <IsBinaryBuild>false</IsBinaryBuild>
    </PropertyGroup>

    <Target Name="SetPredictableProperties" BeforeTargets="CreatePackageProperties">
        <PropertyGroup>
            <!-- Debianize package name -->
            <PackagePrefix>$(TargetName.ToLowerInvariant().Replace('.', '-'))</PackagePrefix>
            <DebPackageArchitecture Condition="$(RuntimeIdentifier.Contains('x64'))">amd64</DebPackageArchitecture>
            <DebPackageArchitecture Condition="$(RuntimeIdentifier.Contains('x86'))">i386</DebPackageArchitecture>
            <DebPackageArchitecture Condition="$(RuntimeIdentifier.Contains('arm'))">armhf</DebPackageArchitecture>
            <DebPackageArchitecture Condition="'$(RuntimeIdentifier)' == ''">all</DebPackageArchitecture>
            <PackageName>$(PackagePrefix)_$(Version)_$(DebPackageArchitecture)</PackageName>
        </PropertyGroup>

        <PropertyGroup Condition="'$(OutputType)' == 'Exe'">
            <IsBinaryBuild>true</IsBinaryBuild>
        </PropertyGroup>
    </Target>

    <Target Name="RepairProperties" AfterTargets="CreatePackageProperties">
        <!-- Fix up package description to comply with debian standards -->
        <PropertyGroup>
            <!-- No leading or trailing whitespace -->
            <PackageDescription>$(PackageDescription.Trim())</PackageDescription>

            <!-- Single newlines to spaces -->
            <PackageDescription>$([System.Text.RegularExpressions.Regex]::Replace($(PackageDescription), "(?&lt;!\n)\n(?!\n)", " "))</PackageDescription>

            <!-- Double newlines (except the first) to escaped blank lines  -->
            <PackageDescription>$([System.Text.RegularExpressions.Regex]::Replace($(PackageDescription), "(?&lt;!^[^.]*)\n\n", "%0A .%0A "))</PackageDescription>

            <!-- Initial double newline to single newline -->
            <PackageDescription>$([System.Text.RegularExpressions.Regex]::Replace($(PackageDescription), "(?&lt;!\n)\n{2}(?!\n)", "%0A"))</PackageDescription>

            <!-- Sequences of spaces to single spaces -->
            <PackageDescription>$([System.Text.RegularExpressions.Regex]::Replace($(PackageDescription), " {2,}", " "))</PackageDescription>
        </PropertyGroup>
    </Target>

    <Target Name="RenameAfterBuild" AfterTargets="AfterBuild;SetPredictableProperties"  Condition="$(IsBinaryBuild)">
        <Move SourceFiles="$(OUTDIR)\$(AssemblyName)" DestinationFiles="$(OUTDIR)\$(PackagePrefix)" Condition="Exists('$(OUTDIR)\$(AssemblyName)')" />
    </Target>

    <Target Name="RenameBeforePublish" BeforeTargets="CreatePackageProperties" AfterTargets="SetPredictableProperties">
        <Move SourceFiles="$(OUTDIR)publish\$(AssemblyName)" DestinationFiles="$(OUTDIR)publish\$(PackagePrefix)" Condition="$(IsBinaryBuild) And Exists('$(OUTDIR)publish\$(AssemblyName)')" />
    </Target>

    <Target Name="SetAppHostName" AfterTargets="CreatePackageProperties" Condition="$(IsBinaryBuild)">
        <PropertyGroup>
            <AppHost Condition="'$(SymlinkAppHostInBin)' == 'true'">$(PackagePrefix)$(_NativeExecutableExtension)</AppHost>
        </PropertyGroup>
    </Target>
</Project>
